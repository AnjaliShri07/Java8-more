✅ Problem Statement
Given an array of integers and a target sum, this method returns the length of the smallest contiguous subarray
such that the sum of the subarray exceeds the target. If no such subarray exists, it returns -1.
📘 Example

arr = {1, 2, 3, 4}
target = 6

Valid subarrays that exceed 6:
- [3, 4] → sum = 7 → length = 2
- [2, 3, 4] → sum = 9 → length = 3
- [1, 2, 3, 4] → sum = 10 → length = 4
The smallest length = 2 → So output = 2

🔍 Logic Breakdown
Variables:

int n = arr.length;
int minLength = Integer.MAX_VALUE;
int start = 0, end = 0, currentSum = 0;
minLength: to store the shortest length of valid subarrays

start and end: define the sliding window (arr[start...end-1])
currentSum: sum of elements in the current window

🪟 Sliding Window Technique
1. Expand the Window (while (currentSum <= target && end < n)):

currentSum += arr[end++];
Add elements from the right side.
Keep expanding end until currentSum > target.

2. Shrink the Window (while (currentSum > target && start < n)):

minLength = Math.min(minLength, end - start);
currentSum -= arr[start++];
Once sum exceeds target, try removing from the left to minimize length while still maintaining currentSum > target.

3. Repeat:
Loop continues until the end pointer reaches the end of the array.

🧪 Example:

arr = [1, 2, 3, 4], target = 6
Subarrays:

[1, 2, 3] = 6 → not valid (must exceed)

[2, 3, 4] = 9 → valid, length = 3

[3, 4] = 7 → valid, shorter! → result = 2

Returns: 2

✅ Return Final Result:

return minLength == Integer.MAX_VALUE ? -1 : minLength;
If no valid subarray was found, return -1

Otherwise, return the shortest valid length

🧠 Time and Space Complexity:

Metric	Value
Time	O(n)
Space	O(1)
Why?	Each element is visited at most twice (once by end, once by start)