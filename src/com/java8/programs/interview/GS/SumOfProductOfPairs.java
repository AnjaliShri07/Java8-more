package com.java8.programs.interview.GS;

import java.util.stream.IntStream;

public class SumOfProductOfPairs {
    public static void main(String[] args) {
        int[] arr = {1, 3, 4}; // Example array

        int sumOfProducts = IntStream.range(0, arr.length)
                .flatMap(i -> IntStream.range(i + 1, arr.length)
                        .map(j -> arr[i] * arr[j]))
                .sum();

        System.out.println("Sum of product of all pairs: " + sumOfProducts);
    }
}
/*IntStream.range(0, arr.length):

This creates an IntStream of integers starting from 0 up to arr.length - 1.
Essentially, it generates a stream of indices for the array arr.
flatMap(i -> IntStream.range(i + 1, arr.length):

For each index i in the stream, it creates another IntStream starting from i + 1 up to arr.length - 1.
This nested stream represents the indices j that come after i.
map(j -> arr[i] * arr[j]):

For each pair of indices (i, j), it calculates the product of the elements at these indices: arr[i] * arr[j].
This results in a stream of products for each combination of elements in the array.
sum():

Finally, it sums up all the products generated by the flatMap operation.
The result is stored in the variable sumOfProducts.
Example
Let's say arr is [1, 2, 3, 4]. The code will perform the following steps:

For i = 0, it will generate products with j = 1, 2, 3:

arr[0] * arr[1] = 1 * 2 = 2
arr[0] * arr[2] = 1 * 3 = 3
arr[0] * arr[3] = 1 * 4 = 4
For i = 1, it will generate products with j = 2, 3:

arr[1] * arr[2] = 2 * 3 = 6
arr[1] * arr[3] = 2 * 4 = 8
For i = 2, it will generate products with j = 3:

arr[2] * arr[3] = 3 * 4 = 12
For i = 3, there are no j values left to generate products.

Summing these products: 2 + 3 + 4 + 6 + 8 + 12 = 35.

So, sumOfProducts will be 35.*/
