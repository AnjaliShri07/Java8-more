Problem -
You are given a list of songs where the ith song has a duration of time[i] seconds.
Return the number of pairs of songs for which their total duration in seconds is divisible by 60. Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.

Example 1:

Input: time = [30,20,150,100,40]
Output: 3
Explanation: Three pairs have a total duration divisible by 60:
(time[0] = 30, time[2] = 150): total duration 180
(time[1] = 20, time[3] = 100): total duration 120
(time[1] = 20, time[4] = 40): total duration 60
Example 2:

Input: time = [60,60,60]
Output: 3
Explanation: All three pairs have a total duration of 120, which is divisible by 60.

💡 Key Insight
If time[i] % 60 = r, then we need to find how many js already seen such that:

java
Copy
Edit
time[j] % 60 == (60 - r) % 60
Example:

If r = 20, we need (60 - 20) % 60 = 40 to make (r + complement) % 60 == 0

Special case:

If r == 0, complement is also 0
If r == 30, complement is also 30

🔍 How It Works
Let’s walk through the input: [30, 20, 150, 100, 40]

Element | %60 | Complement | Found So Far (Pairs)
30 | 30 | 30 | 0
20 | 20 | 40 | 0
150 | 30 | 30 | 1 (30 + 150)
100 | 40 | 20 | 1 (20 + 100)
40 | 40 | 20 | 1 (20 + 40)
 |  |  | Total = 3
🧠 Time and Space Complexity

Complexity	Value
Time	O(n)
Space	O(1) — just 60-size array
✅ Summary

Feature	Value
Handles duplicates	Yes
Fast	Yes, linear time
Clean solution	Using mod + bucket
Java version	Compatible with 8+