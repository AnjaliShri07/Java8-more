Problem -
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]

To solve this problem efficiently in O(log n) time, we can use binary search twice:

Once to find the first occurrence of the target.

Once to find the last occurrence of the target.

ðŸ§  Explanation
The idea is to perform binary search to find:

The first index of target (search left after finding).

The last index of target (search right after finding).

ðŸŸ¢ Time Complexity
Both findFirst() and findLast() take O(log n).

Total time: O(log n) âœ…

