Problem :
Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.
If the fractional part is repeating, enclose the repeating part in parentheses.
If multiple answers are possible, return any of them.
It is guaranteed that the length of the answer string is less than 104 for all the given inputs.

Example 1:

Input: numerator = 1, denominator = 2
Output: "0.5"
Example 2:

Input: numerator = 2, denominator = 1
Output: "2"
Example 3:

Input: numerator = 4, denominator = 333
Output: "0.(012)"

🔍 Explanation
Handle Sign:

if ((numerator < 0) ^ (denominator < 0))
    result.append("-");
Uses XOR to determine if only one of them is negative.

Convert to long: Prevents overflow when dealing with values like Integer.MIN_VALUE.
🔍 Why use Math.abs((long) numerator)?
The goal is to:

Avoid integer overflow, especially when dealing with Integer.MIN_VALUE
Work with positive values so we can safely calculate the decimal part without sign complications

⚠️ Why is this needed?
Java's int range is from -2,147,483,648 to 2,147,483,647.
So if you do this:

int x = Math.abs(Integer.MIN_VALUE);  // -2147483648
💥 It overflows and gives the same negative value, because Integer.MIN_VALUE has no positive counterpart in int.

Detect recurring decimals:

Use a Map<Long, Integer> to store remainders

When a remainder repeats, the digits from that point will repeat forever

We insert a ( at the first index of the repeating part and append a ) at the end

✅ Time & Space Complexity

Metric	Value
Time	O(n), where n is number of digits before repetition
Space	O(n), map stores remainders seen

